<template>
  <view class="container">
    <origin-form class="list" bindsubmit="submitTemplateMessageForm" report-submit>
      <origin-button class="list-item" form-type="submit">
        <text>发送模板消息</text>
      </origin-button>
      <view class="list-item" c-if="{{templateMessageResult}}">
        <text class="request-text">调用结果：{{templateMessageResult}}</text>
      </view>
    </origin-form>

    <view class="guide">
      <text class="headline">测试须知</text>
      <text class="p">1. 需在手机上预览测试，工具中无效</text>
      <text class="p">2. 需上传 cloudfunctions 目录下的 openapi 云函数</text>
      <text class="p">3. 调用成功后返回到微信主界面查看收到的模板消息</text>
    </view>

    <view class="list">
      <view class="list-item" c-bind:tap="onGetWXACode">
        <text>获取小程序码</text>
      </view>
      <view class="list-item" c-if="{{wxacodeResult}}">
        <text class="request-text">{{wxacodeResult}}</text>
        <text class="request-text" c-if="{{showClearWXACodeCache}}" c-bind:tap="clearWXACodeCache">清除缓存</text>
      </view>
    </view>

    <view class="guide">
      <text class="headline">测试须知</text>
      <text class="p">1. 需上传 cloudfunctions 目录下的 openapi 云函数</text>
      <text class="p">2. 云函数中获取图片后会上传至存储空间并返回至小程序使用和缓存</text>
      <text class="p">3. 云存储需设置为公有读</text>
    </view>

    <view class="guide">
      <image src="{{wxacodeSrc}}" mode="aspectFit"></image>
    </view>

  </view>

</template>

<script>
import common from '../../components/common/cloud.interface'
import cml from 'chameleon-api';
let cloud = common.getCloud();
class Serverapi   {

  data = {
    templateMessageResult: '',
    wxacodeSrc: '',
    wxacodeResult: '',
    showClearWXACodeCache: false,
  }

  computed = {
  }

  watch  = {
  }

  methods = {
    submitTemplateMessageForm(e) {
      this.templateMessageResult = ''

      cloud.callFunction({
        name: 'openapi',
        data: {
          action: 'sendTemplateMessage',
          formId: e.detail.formId,
        },
        success: res => {
          console.warn('[云函数] [openapi] templateMessage.send 调用成功：', res)
          cml.showToast({
            message: '发送成功，请返回微信主界面查看',
          })
          this.templateMessageResult = JSON.stringify(res.result);
        },
        fail: err => {
          cml.showToast({
            message: '调用失败',
          })
          console.error('[云函数] [openapi] templateMessage.send 调用失败：', err)
        }
      })
    },

    onGetWXACode() {
      this.wxacodeSrc = '';
      this.wxacodeResult = '';
      this.showClearWXACodeCache = false;

      // 此处为演示，将使用 localStorage 缓存，正常开发中文件 ID 应存在数据库中
      const fileID = wx.getStorageSync('wxacodeCloudID')

      if (fileID) {
        // 有云文件 ID 缓存，直接使用该 ID
        // 如需清除缓存，选择菜单栏中的 “工具 -> 清除缓存 -> 清除数据缓存”，或在 Storage 面板中删掉相应的 key
        this.wxacodeSrc = fileID;
        this.wxacodeResult = `从本地缓存中取得了小程序码的云文件 ID`;
        this.showClearWXACodeCache = true;
        console.log(`从本地缓存中取得了小程序码的云文件 ID：${fileID}`)
      } else {
        cloud.callFunction({
          name: 'openapi',
          data: {
            action: 'getWXACode',
          },
          success: res => {
            console.warn('[云函数] [openapi] wxacode.get 调用成功：', res)
            cml.showToast({
              message: '调用成功',
            })
            this.wxacodeSrc = res.result;
            this.wxacodeResult = `云函数获取二维码成功`;
            this.showClearWXACodeCache = true;
            wx.setStorageSync('wxacodeCloudID', res.result)
          },
          fail: err => {
            cml.showToast({
              message: '调用失败',
            })
            console.error('[云函数] [openapi] wxacode.get 调用失败：', err)
          }
        })
      }
    },

    clearWXACodeCache() {
      wx.removeStorageSync('wxacodeCloudID')
      this.wxacodeSrc = '';
      this.wxacodeResult = '';
      this.showClearWXACodeCache = false;

      cml.showToast({
        message: '清除成功',
      })
    },
  }

  beforeCreate(query) {
    
  }

  created(query) {
    console.log('query',query)
  }

  beforeMount(query) {
  }

  onShow() {
  }

  mounted() {
  }

  onHide() {
  }

  beforeDestroy() {
  }

  destroyed() {
  }
}

export default new Serverapi();
</script>

<style>
@import "../../style/guide.css";
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {}
  },
  "qq": {
    "navigationBarTitleText": "index",
    "backgroundTextStyle": "dark",
    "backgroundColor": "#E2E2E2"
  },
  "wx": {
    "navigationBarTitleText": "index",
    "backgroundTextStyle": "dark",
    "backgroundColor": "#E2E2E2"
  },
  "alipay": {
    "defaultTitle": "index",
    "pullRefresh": false,
    "allowsBounceVertical": "YES",
    "titleBarColor": "#ffffff"
  },
  "baidu": {
    "navigationBarBackgroundColor": "#ffffff",
    "navigationBarTextStyle": "white",
    "navigationBarTitleText": "index",
    "backgroundColor": "#ffffff",
    "backgroundTextStyle": "dark",
    "enablePullDownRefresh": false,
    "onReachBottomDistance": 50
  }
}
</script>
